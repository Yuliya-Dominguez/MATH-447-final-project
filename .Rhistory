q()
q()
rm(list=ls())
data <- read.csv("Spotify_Youtube.csv", header=TRUE)
View(data)
#remove columns 1-5, 7 in Spotify section
#remove 19-21, 25 in YouTube section
#convert column 6 and 26-27 to dummy variables (binary)
#stepwise regression to select variables, or CV (k-fold)
#Lasso for prediction
#do Spotify and YouTube separately, use comments instead of views in YouTube
#####Cleaning the data
#Spotify data
#Here is a (not effiecient) way I split the data (COLIN)
#datafix1 <- data.frame(as.matrix(data[,-1:-5]))
#datafix2 <- data.frame(as.matrix(datafix1[,-2]))
#spotify_data_worse <- data.frame(as.matrix(datafix2[,-13:-21]))
#here is a better way of doing what I did shoutout to Bavita
spotremcol <- c(1,2,3,4,5,7,19,20,21,22,23,24,25,26,27)
spotify_data <- data.frame(as.matrix(data[-spotremcol]))
#change album/single to 1 for album 0 for single
for(i in 1:20718){
if(spotify_data$Album_type[i] == "album"){
spotify_data$Album_type[i] = 1
}
if(spotify_data$Album_type[i] == "compilation"){
spotify_data$Album_type[i] = 1
}
if(spotify_data$Album_type[i] == "single"){
spotify_data$Album_type[i] = 0
}
}
spotify_data$Album_type <- as.numeric(spotify_data$Album_type)
head(spotify_data$Album_type)
#now making youtube dataset
#datafix3 <- data.frame(as.matrix((data[,-1:-7])))
#datafix4 <- data.frame(as.matrix(datafix3[-12:-14]))
#datafix5 <- data.frame(as.matrix(datafix4[-15]))
#youtube_data_worse <- data.frame(as.matrix(datafix5[-17]))
#checking for correlation:
#pairs(spotify_data)
#cor(spotify_data, y=Null)
#cannot do pairs or correlation cause there's still non-numeric argument, so going to convert each variable to numeric (Bavita)
spotify_data$Album_type <- c(single=0,compilation=1,album=1)[spotify_data$Album_type]
summary(spotify_data)
spotify_data$Album_type <- as.numeric(spotify_data$Album_type)
spotify_data$Danceability <- as.numeric(spotify_data$Danceability)
spotify_data$Energy <- as.numeric(spotify_data$Energy)
spotify_data$Key <- as.numeric(spotify_data$Key)
spotify_data$Loudness <- as.numeric(spotify_data$Loudness)
spotify_data$Speechiness <- as.numeric(spotify_data$Speechiness)
spotify_data$Acousticness <- as.numeric(spotify_data$Acousticness)
spotify_data$Instrumentalness <- as.numeric(spotify_data$Instrumentalness)
spotify_data$Liveness <- as.numeric(spotify_data$Liveness)
spotify_data$Valence <- as.numeric(spotify_data$Valence)
spotify_data$Tempo <- as.numeric(spotify_data$Tempo)
spotify_data$Duration_ms <- as.numeric(spotify_data$Duration_ms)
spotify_data$Stream <- as.numeric(spotify_data$Stream)
#pairs(spotify_data)
#cor(spotify_data)
#we also have NA values in stream variable, so correlation function does not work. SO, omit the observations that include NAs (Bavita)
is.na(spotify_data)
as.data.frame(na.omit(spotify_data))
setwd("~/Documents/GitHub/MATH-447-final-project")
rm(list=ls())
data <- read.csv("Spotify_Youtube.csv", header=TRUE)
View(data)
#remove columns 1-5, 7 in Spotify section
#remove 19-21, 25 in YouTube section
#convert column 6 and 26-27 to dummy variables (binary)
#stepwise regression to select variables, or CV (k-fold)
#Lasso for prediction
#do Spotify and YouTube separately, use comments instead of views in YouTube
#####Cleaning the data
#Spotify data
#Here is a (not effiecient) way I split the data (COLIN)
#datafix1 <- data.frame(as.matrix(data[,-1:-5]))
#datafix2 <- data.frame(as.matrix(datafix1[,-2]))
#spotify_data_worse <- data.frame(as.matrix(datafix2[,-13:-21]))
#here is a better way of doing what I did shoutout to Bavita
spotremcol <- c(1,2,3,4,5,7,19,20,21,22,23,24,25,26,27)
spotify_data <- data.frame(as.matrix(data[-spotremcol]))
#change album/single to 1 for album 0 for single
for(i in 1:20718){
if(spotify_data$Album_type[i] == "album"){
spotify_data$Album_type[i] = 1
}
if(spotify_data$Album_type[i] == "compilation"){
spotify_data$Album_type[i] = 1
}
if(spotify_data$Album_type[i] == "single"){
spotify_data$Album_type[i] = 0
}
}
spotify_data$Album_type <- as.numeric(spotify_data$Album_type)
head(spotify_data$Album_type)
#now making youtube dataset
#datafix3 <- data.frame(as.matrix((data[,-1:-7])))
#datafix4 <- data.frame(as.matrix(datafix3[-12:-14]))
#datafix5 <- data.frame(as.matrix(datafix4[-15]))
#youtube_data_worse <- data.frame(as.matrix(datafix5[-17]))
#checking for correlation:
#pairs(spotify_data)
#cor(spotify_data, y=Null)
#cannot do pairs or correlation cause there's still non-numeric argument, so going to convert each variable to numeric (Bavita)
spotify_data$Album_type <- c(single=0,compilation=1,album=1)[spotify_data$Album_type]
summary(spotify_data)
spotify_data$Album_type <- as.numeric(spotify_data$Album_type)
spotify_data$Danceability <- as.numeric(spotify_data$Danceability)
spotify_data$Energy <- as.numeric(spotify_data$Energy)
spotify_data$Key <- as.numeric(spotify_data$Key)
spotify_data$Loudness <- as.numeric(spotify_data$Loudness)
spotify_data$Speechiness <- as.numeric(spotify_data$Speechiness)
spotify_data$Acousticness <- as.numeric(spotify_data$Acousticness)
spotify_data$Instrumentalness <- as.numeric(spotify_data$Instrumentalness)
spotify_data$Liveness <- as.numeric(spotify_data$Liveness)
spotify_data$Valence <- as.numeric(spotify_data$Valence)
spotify_data$Tempo <- as.numeric(spotify_data$Tempo)
spotify_data$Duration_ms <- as.numeric(spotify_data$Duration_ms)
spotify_data$Stream <- as.numeric(spotify_data$Stream)
#pairs(spotify_data)
#cor(spotify_data)
#we also have NA values in stream variable, so correlation function does not work. SO, omit the observations that include NAs (Bavita)
is.na(spotify_data)
as.data.frame(na.omit(spotify_data))
cor(na.omit(spotify_data))
remcol <- c(1,2,3,4,5,7,19,20,21,25,28)
youtube_data <- data.frame(as.matrix(data[-remcol]))
#converting 'Licensed' and 'official_video' to 0 and 1
youtube_data$Licensed <- as.logical(youtube_data$Licensed)
youtube_data$Licensed <- as.integer(youtube_data$Licensed)
youtube_data$official_video <- as.logical(youtube_data$official_video)
youtube_data$official_video <- as.integer(youtube_data$official_video)
youtube_data$Album_type <- c(single=0,compilation=1,album=1)[youtube_data$Album_type]
youtube_data$Album_type <- as.numeric(youtube_data$Album_type)
summary(youtube_data)
youtube_data$Danceability <- as.numeric(youtube_data$Danceability)
youtube_data$Energy <- as.numeric(youtube_data$Energy)
youtube_data$Key <- as.numeric(youtube_data$Key)
youtube_data$Loudness <- as.numeric(youtube_data$Loudness)
youtube_data$Speechiness <- as.numeric(youtube_data$Speechiness)
youtube_data$Acousticness <- as.numeric(youtube_data$Acousticness)
youtube_data$Instrumentalness <- as.numeric(youtube_data$Instrumentalness)
youtube_data$Liveness <- as.numeric(youtube_data$Liveness)
youtube_data$Valence <- as.numeric(youtube_data$Valence)
youtube_data$Tempo <- as.numeric(youtube_data$Tempo)
youtube_data$Duration_ms <- as.numeric(youtube_data$Duration_ms)
youtube_data$Views <- as.numeric(youtube_data$Views)
youtube_data$Likes <- as.numeric(youtube_data$Likes)
youtube_data$Comments <- as.numeric(youtube_data$Comments)
youtube_data$Licensed <- as.numeric(youtube_data$Licensed)
youtube_data$official_video <- as.numeric(youtube_data$official_video)
summary(youtube_data)
youtube_data <- na.omit(youtube_data)
cor(youtube_data)
youtube_lm <- lm(Views~Likes+Comments+Licensed+official_video+Loudness+Danceability+Acousticness+Instrumentalness+Energy+Valence+Album_type+Duration_ms+Liveness+Speechiness+Key+Tempo, data=youtube_data)
summary(youtube_lm)
youtube_lm1 <- lm(Views~Likes+Comments+Licensed+Loudness+Danceability+Acousticness+Instrumentalness+Energy+Valence+Album_type+Duration_ms+Liveness+Speechiness+Key+Tempo, data=youtube_data)
summary(youtube_lm1)
youtube_lm2 <- lm(Views~Likes+Comments+Licensed+Danceability+Acousticness+Instrumentalness+Energy+Valence+Album_type+Duration_ms+Liveness+Speechiness+Key+Tempo, data=youtube_data)
summary(youtube_lm2)
youtube_lm3 <- lm(Views~Likes+Comments+Licensed+Danceability+Instrumentalness+Energy+Valence+Album_type+Duration_ms+Liveness+Speechiness+Key+Tempo, data=youtube_data)
summary(youtube_lm3)
youtube_lm4 <- lm(Views~Likes+Comments+Licensed+Danceability+Energy+Valence+Album_type+Duration_ms+Liveness+Speechiness+Key+Tempo, data=youtube_data)
summary(youtube_lm4)
youtube_lm5 <- lm(Views~Likes+Comments+Licensed+Danceability+Energy+Valence+Album_type+Duration_ms+Speechiness+Key+Tempo, data=youtube_data)
summary(youtube_lm5)
youtube_lm6 <- lm(Views~Likes+Comments+Licensed+Danceability+Energy+Valence+Album_type+Duration_ms+Speechiness+Tempo, data=youtube_data)
summary(youtube_lm6)
#now all the variables are significant (Bavita)
anova(youtube_lm, youtube_lm1, youtube_lm2, youtube_lm3, youtube_lm4, youtube_lm5, youtube_lm6)
youtube_lm_int <- lm(Views~Likes*Comments+Licensed+Danceability+Instrumentalness+Energy+Valence+Album_type+Duration_ms+Liveness+Speechiness+Key+Tempo, data=youtube_data)
summary(youtube_lm_int)
anova(youtube_lm, youtube_lm1, youtube_lm2, youtube_lm3, youtube_lm4, youtube_lm5, youtube_lm6, youtube_lm_int)
q()
setwd("~/Documents/GitHub/MATH-447-final-project")
data <- read.csv("Spotify_Youtube.csv", header=TRUE)
View(data)
#remove columns 1-5, 7 in Spotify section
#remove 19-21, 25 in YouTube section
#convert column 6 and 26-27 to dummy variables (binary)
#stepwise regression to select variables, or CV (k-fold)
#Lasso for prediction
#do Spotify and YouTube separately, use comments instead of views in YouTube
#####Cleaning the data
#Spotify data
#Here is a (not effiecient) way I split the data (COLIN)
#datafix1 <- data.frame(as.matrix(data[,-1:-5]))
#datafix2 <- data.frame(as.matrix(datafix1[,-2]))
#spotify_data_worse <- data.frame(as.matrix(datafix2[,-13:-21]))
#here is a better way of doing what I did shoutout to Bavita
spotremcol <- c(1,2,3,4,5,7,19,20,21,22,23,24,25,26,27)
spotify_data <- data.frame(as.matrix(data[-spotremcol]))
#change album/single to 1 for album 0 for single
for(i in 1:20718){
if(spotify_data$Album_type[i] == "album"){
spotify_data$Album_type[i] = 1
}
if(spotify_data$Album_type[i] == "compilation"){
spotify_data$Album_type[i] = 1
}
if(spotify_data$Album_type[i] == "single"){
spotify_data$Album_type[i] = 0
}
}
spotify_data$Album_type <- as.numeric(spotify_data$Album_type)
head(spotify_data$Album_type)
remcol <- c(1,2,3,4,5,7,19,20,21,25,28)
youtube_data <- data.frame(as.matrix(data[-remcol]))
#converting 'Licensed' and 'official_video' to 0 and 1
youtube_data$Licensed <- as.logical(youtube_data$Licensed)
youtube_data$Licensed <- as.integer(youtube_data$Licensed)
youtube_data$official_video <- as.logical(youtube_data$official_video)
youtube_data$official_video <- as.integer(youtube_data$official_video)
youtube_data$Album_type <- c(single=0,compilation=1,album=1)[youtube_data$Album_type]
youtube_data$Album_type <- as.numeric(youtube_data$Album_type)
summary(youtube_data)
#changing all the variables to numeric (Bavita)
youtube_data$Danceability <- as.numeric(youtube_data$Danceability)
youtube_data$Energy <- as.numeric(youtube_data$Energy)
youtube_data$Key <- as.numeric(youtube_data$Key)
youtube_data$Loudness <- as.numeric(youtube_data$Loudness)
youtube_data$Speechiness <- as.numeric(youtube_data$Speechiness)
youtube_data$Acousticness <- as.numeric(youtube_data$Acousticness)
youtube_data$Instrumentalness <- as.numeric(youtube_data$Instrumentalness)
youtube_data$Liveness <- as.numeric(youtube_data$Liveness)
youtube_data$Valence <- as.numeric(youtube_data$Valence)
youtube_data$Tempo <- as.numeric(youtube_data$Tempo)
youtube_data$Duration_ms <- as.numeric(youtube_data$Duration_ms)
youtube_data$Views <- as.numeric(youtube_data$Views)
youtube_data$Likes <- as.numeric(youtube_data$Likes)
youtube_data$Comments <- as.numeric(youtube_data$Comments)
youtube_data$Licensed <- as.numeric(youtube_data$Licensed)
youtube_data$official_video <- as.numeric(youtube_data$official_video)
summary(youtube_data)
youtube_data <- na.omit(youtube_data)
youtube_lm <- lm(Views~Likes+Comments+Licensed+official_video+Loudness+Danceability+Acousticness+Instrumentalness+Energy+Valence+Album_type+Duration_ms+Liveness+Speechiness+Key+Tempo, data=youtube_data)
summary(youtube_lm)
#taking out official video, loudness, acousticness, instrumentalness, liveness and key  one by one cause they are insignificant variables
youtube_lm1 <- lm(Views~Likes+Comments+Licensed+Loudness+Danceability+Acousticness+Instrumentalness+Energy+Valence+Album_type+Duration_ms+Liveness+Speechiness+Key+Tempo, data=youtube_data)
summary(youtube_lm1)
youtube_lm2 <- lm(Views~Likes+Comments+Licensed+Danceability+Acousticness+Instrumentalness+Energy+Valence+Album_type+Duration_ms+Liveness+Speechiness+Key+Tempo, data=youtube_data)
summary(youtube_lm2)
youtube_lm3 <- lm(Views~Likes+Comments+Licensed+Danceability+Instrumentalness+Energy+Valence+Album_type+Duration_ms+Liveness+Speechiness+Key+Tempo, data=youtube_data)
summary(youtube_lm3)
youtube_lm4 <- lm(Views~Likes+Comments+Licensed+Danceability+Energy+Valence+Album_type+Duration_ms+Liveness+Speechiness+Key+Tempo, data=youtube_data)
summary(youtube_lm4)
youtube_lm5 <- lm(Views~Likes+Comments+Licensed+Danceability+Energy+Valence+Album_type+Duration_ms+Speechiness+Key+Tempo, data=youtube_data)
summary(youtube_lm5)
youtube_lm6 <- lm(Views~Likes+Comments+Licensed+Danceability+Energy+Valence+Album_type+Duration_ms+Speechiness+Tempo, data=youtube_data)
summary(youtube_lm6)
#now all the variables are significant (Bavita)
anova(youtube_lm, youtube_lm1, youtube_lm2, youtube_lm3, youtube_lm4, youtube_lm5, youtube_lm6)
#all the models are equal to each other cause the p value is really high but model youtube_lm3 has the smallest p value among these models
#interaction terms in youtube_lm3:
youtube_lm_int <- lm(Views~Likes*Comments+Licensed+Danceability+Instrumentalness+Energy+Valence+Album_type+Duration_ms+Liveness+Speechiness+Key+Tempo, data=youtube_data)
summary(youtube_lm_int)
youtube_data_ln <- youtube_data
youtube_data_ln$Views <- log(youtube_data_ln$Views)
#Using youtube_lm6's model with transformed response:
youtube_lm_ln <- lm(Views~Likes+Comments+Licensed+Danceability+Energy+Valence+Album_type+Duration_ms+Speechiness+Tempo, data=youtube_data.ln)
summary(youtube_lm_ln)
youtube_data_ln <- youtube_data
youtube_data_ln$Views <- log(youtube_data_ln$Views)
#Using youtube_lm6's model with transformed response:
youtube_lm_ln <- lm(Views~Likes+Comments+Licensed+Danceability+Energy+Valence+Album_type+Duration_ms+Speechiness+Tempo, data=youtube_data_ln)
summary(youtube_lm_ln)
youtube_data_ln <- youtube_data
youtube_data_ln$Views <- log(youtube_data_ln$Views)
youtube_lm_ln <- lm(Views~Likes+Comments+Licensed+Danceability+Energy+Valence+Album_type+Duration_ms+Speechiness+Tempo, data=youtube_data_ln)
summary(youtube_lm_ln)
head(youtube_data_ln$Views)
na.omit(youtube_data)
youtube_lm_ln <- lm(Views~Likes+Comments+Licensed+Danceability+Energy+Valence+Album_type+Duration_ms+Speechiness+Tempo, data=youtube_data_ln)
summary(youtube_lm_ln)
log.youtube.lm <- lm(Views~Likes+Comments+Licensed+Danceability+Energy+Valence+Album_type+Duration_ms+Speechiness+Tempo, data=youtube_data_ln)
summary(youtube_lm_ln)
youtube_data_ln$Views <- youtube_data_ln$Views>0
youtube_lm_ln <- lm(Views~Likes+Comments+Licensed+Danceability+Energy+Valence+Album_type+Duration_ms+Speechiness+Tempo, data=youtube_data_ln)
summary(youtube_lm_ln)
library(glmnet)
set.seed(5)
library(ISLR)
youtube_data.lasso <- data.frame(scale(as.matrix(youtube_data)))
train <- sample(1:dim(youtube_data.lasso)[1], dim(youtube_data.lasso)[1]/2)
test <- -train
logpred.lm <- predict(youtube_data_ln, data = youtube_data_ln)
lasso.fit.lm <- lm(Views~Likes+Comments+Licensed+Danceability+Energy+Valence+Album_type+Duration_ms+Speechiness+Tempo, data=train)
youtube_data.train <- youtube_data[train,]
youtube_data.test <- youtube_data[test,]
lasso.fit.lm <- lm(Views~Likes+Comments+Licensed+Danceability+Energy+Valence+Album_type+Duration_ms+Speechiness+Tempo, data=youtube_data.train)
summary(lasso.fit.lm)
lasso.fit.lm <- lm(Views ~ ., data = youtube_data.train)
summary(lasso.fit.lm)
train.mat <- model.matrix(Views ~ ., data= youtube_data.train)[,-1]
test.mat <- model.matrix(Views ~., data = youtube_data.test)[,-1]
fit.lasso(train.mat, youtube_data.train$Views, alpha=1)
fit.lasso <- glmnet(train.mat, youtube_data.train$Views, alpha=1)
cv.lasso <- cv.glmnet(train.mat, youtube_data.train$Views, alpha=1)
bestlam.lasso <- cv.lasso$lambda.min
bestlam.lasso
pred.lasso <- predict(fit.lasso, s = bestlam.lasso, newx = test.mat)
mean((pred.lasso - youtube_data.train$Views)^2)
dim(pred.lasso)
dim(youtube_data.train$Views)
youtube_data.train
dim(youtube_data.test$Views)
dim(youtube_data.test)
mean((pred.lasso - youtube_data.test$Views)^2)
youtube_lm6 <- lm(Views~Likes+Comments+Licensed+Danceability+Energy+Valence+Album_type+Duration_ms+Speechiness+Tempo, data=youtube_data)
summary(youtube_lm6)
pred.best.model <- predict(youtube_lm6, data = youtube_data)
mean((pred.best.model - youtube_data$Views)^2)
mean((pred.lasso - youtube_data.test$Views)^2)
youtube_lm_ln <- lm(Views~Likes+Comments+Licensed+Danceability+Energy+Valence+Album_type+Duration_ms+Speechiness+Tempo, data=youtube_data_ln)
log.predict <- predict(youtube_lm_ln, data = youtube_data_ln)
mean((log.predict - youtube_data_ln$Views)^2)
e^4.957805e-05
exp(4.957805e-05)
log.resid <- c(log.predict - youtube_data_ln$Views)
plot(log.predict, log.resid, xlab = "Predicted Value", ylab = "Residuals")
norm.resid <- c(pred.best.model - youtube_data.test$Views)
dim(pred.best.model)
length(pred.best.model)
length(youtube_data$Views)
plot(pred.best.model, norm.resid, xlab = "Predicted Value", ylab = "Residuals")
library(MASS)
library(class)
fit.lda <- lda(Views ~ ., data = youtube_data.train)
fit.lda
pred.lda <- predict(fit.lda, youtube_data.test)
table(pred.lda$class, youtube_data.test)
pred.lda$class
